<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>数理习题动画增强版</title>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+SC:wght@400;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #007bff;
            --secondary-color: #6c757d;
            --highlight-color: #ffc107;
            --bg-color: #f8f9fa;
            --surface-color: #ffffff;
            --text-color: #343a40;
            --rect-base-fill: #e9ecef;
            --rect-nine-fill: #87CEEB; /* Skyblue */
            --rect-sixteen-fill: #90EE90; /* Lightgreen */
            --rect-seven-fill: #FFA07A; /* Lightsalmon */
            --rect-yuan-fill: #FFB347; /* Orange (apricot) */
            --rect-result-fill: #98FB98; /* Palegreen */
            --font-family: 'Noto Sans SC', sans-serif;
        }

        body {
            font-family: var(--font-family);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center; /* Center content vertically */
            min-height: 100vh;
            margin: 0;
            padding: 20px;
            background-color: var(--bg-color);
            color: var(--text-color);
        }

        .main-container {
            width: 100%;
            max-width: 450px; /* Max width for 9:16, e.g., phone screen width */
        }
        
        #animationWrapper {
            width: 100%;
            aspect-ratio: 9 / 16; /* Key for 9:16 ratio */
            background-color: var(--surface-color);
            border: 2px solid #dee2e6;
            border-radius: 12px;
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
            overflow: hidden; /* Important for aspect ratio and SVG clipping */
            position: relative;
            display: flex; /* To help center SVG if it's smaller */
            justify-content: center;
            align-items: center;
        }

        #animationContainer {
            width: 100%; /* SVG will take full width of wrapper */
            height: 100%; /* SVG will take full height of wrapper */
        }

        svg {
            display: block; /* Removes extra space below SVG */
            width: 100%;
            height: 100%;
        }

        .controls {
            margin-top: 25px;
            display: flex;
            gap: 10px;
            justify-content: center;
        }

        button {
            padding: 12px 20px;
            font-size: 16px;
            font-weight: 700;
            cursor: pointer;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 8px;
            transition: background-color 0.3s ease, transform 0.1s ease;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        button:hover {
            background-color: #0056b3;
        }
        button:active {
            transform: translateY(1px);
        }

        button:disabled {
            background-color: #adb5bd;
            cursor: not-allowed;
            box-shadow: none;
        }

        #explanation {
            position: absolute;
            bottom: 15px;
            left: 15px;
            right: 15px;
            padding: 12px;
            background-color: rgba(255, 255, 255, 0.95);
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
            line-height: 1.6;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            opacity: 0;
            transform: translateY(10px);
            transition: opacity 0.5s ease, transform 0.5s ease;
        }
        #explanation.visible {
            opacity: 1;
            transform: translateY(0);
        }

        /* SVG Element Styling and Animations */
        rect, text {
            transition: all 0.6s cubic-bezier(0.25, 0.8, 0.25, 1); /* Smooth transition for most props */
            opacity: 0;
            transform-origin: center center;
        }
        
        .visible {
            opacity: 1 !important;
        }

        .appear-translateY {
            transform: translateY(20px);
        }
        .visible.appear-translateY {
             transform: translateY(0px);
        }
        
        .appear-scale {
            transform: scale(0.5);
        }
        .visible.appear-scale {
             transform: scale(1);
        }

        .highlight-rect {
            stroke: var(--highlight-color);
            stroke-width: 3px;
            filter: drop-shadow(0 0 5px var(--highlight-color));
        }
        
        .highlight-text {
            fill: var(--primary-color);
            font-weight: bold;
        }

        .final-answer-text {
            font-size: 28px !important; /* Adjusted for smaller screen */
            font-weight: bold;
            fill: green !important;
        }
        
        .value-text { /* For showing calculated values like "7", "14", "5" */
            font-weight: bold;
            fill: #d9534f; /* A reddish color for emphasis */
        }

        .part-indicator {
            font-size: 12px;
            fill: var(--secondary-color);
        }

    </style>
</head>
<body>
    <div class="main-container">
        <h1>数理动画演示</h1>
        <div id="animationWrapper">
            <div id="animationContainer">
                <svg id="drawingCanvas" viewBox="0 0 360 640" preserveAspectRatio="xMidYMid meet"></svg>
            </div>
            <div id="explanation">请点击“下一步”开始。</div>
        </div>
        <div class="controls">
            <button id="prevBtn" disabled>上一步</button>
            <button id="nextBtn">下一步</button>
            <button id="resetBtn">重置</button>
        </div>
    </div>

    <script>
        const svgNS = "http://www.w3.org/2000/svg";
        const canvas = document.getElementById('drawingCanvas');
        const explanationDiv = document.getElementById('explanation');
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const resetBtn = document.getElementById('resetBtn');

        let currentStep = -1;
        const rectHeight = 35; // Adjusted for 9:16
        const unitWidth = 15;  // Adjusted for 9:16
        const startX = 30;     // Adjusted for 9:16
        const baseY = 80;
        const spacingY = 100; // Spacing between the two main rows

        const yuanWidth = 4 * unitWidth; // Visual width for "元"

        function makeVisible(element, animationClass = 'appear-translateY', delay = 50) {
            if (!element) return;
            element.classList.add(animationClass); // Add transform class before making visible
            setTimeout(() => {
                element.classList.add('visible');
            }, delay); // Small delay to ensure transition applies
        }
        
        function makeInvisible(element) {
            if (!element) return;
            element.classList.remove('visible');
             // Consider removing animation classes if they interfere with other states
        }

        function highlightElement(elementId, type = 'rect') {
            const el = document.getElementById(elementId);
            if (el) {
                el.classList.add(type === 'rect' ? 'highlight-rect' : 'highlight-text');
            }
        }

        function removeHighlight(elementId, type = 'rect') {
            const el = document.getElementById(elementId);
            if (el) {
                el.classList.remove(type === 'rect' ? 'highlight-rect' : 'highlight-text');
            }
        }
        
        function removeAllHighlights() {
            document.querySelectorAll('.highlight-rect').forEach(el => el.classList.remove('highlight-rect'));
            document.querySelectorAll('.highlight-text').forEach(el => el.classList.remove('highlight-text'));
        }


        const steps = [
            // Step 0: 初始状态，九和十六用两个长方形表示
            () => {
                updateExplanation("九和十六用两个长方形表示。");
                
                const rect9 = createRect(startX + yuanWidth, baseY, 9 * unitWidth, rectHeight, 'var(--rect-nine-fill)', 'rect9');
                const text9 = createText(startX + yuanWidth + (9 * unitWidth) / 2, baseY + rectHeight / 2, '9', 'text9');
                makeVisible(rect9); makeVisible(text9);

                const rect16 = createRect(startX + yuanWidth, baseY + spacingY, 16 * unitWidth, rectHeight, 'var(--rect-sixteen-fill)', 'rect16');
                const text16 = createText(startX + yuanWidth + (16 * unitWidth) / 2, baseY + spacingY + rectHeight / 2, '16', 'text16');
                makeVisible(rect16); makeVisible(text16);
            },
            // Step 1: 把十六一分为二，这部分就是九，这部分就是七
            () => {
                updateExplanation("把十六的长方形拆分为“九”和“七”两部分。");
                const oldRect16 = document.getElementById('rect16');
                const oldText16 = document.getElementById('text16');
                if (oldRect16) makeInvisible(oldRect16);
                if (oldText16) makeInvisible(oldText16);

                setTimeout(() => {
                    if (oldRect16) oldRect16.remove();
                    if (oldText16) oldText16.remove();

                    const rect16_9 = createRect(startX + yuanWidth, baseY + spacingY, 9 * unitWidth, rectHeight, 'var(--rect-sixteen-fill)', 'rect16_9');
                    const text16_9 = createText(startX + yuanWidth + (9 * unitWidth) / 2, baseY + spacingY + rectHeight / 2, '9', 'text16_9');
                    
                    const rect16_7 = createRect(startX + yuanWidth + 9 * unitWidth, baseY + spacingY, 7 * unitWidth, rectHeight, 'var(--rect-seven-fill)', 'rect16_7');
                    const text16_7 = createText(startX + yuanWidth + 9 * unitWidth + (7 * unitWidth) / 2, baseY + spacingY + rectHeight / 2, '7', 'text16_7');
                    
                    makeVisible(rect16_9, 'appear-scale'); makeVisible(text16_9, 'appear-scale');
                    makeVisible(rect16_7, 'appear-scale'); makeVisible(text16_7, 'appear-scale');
                    
                    highlightElement('rect16_7');
                    highlightElement('text16_7', 'text');
                }, 600); // Wait for fade out
            },
            // Step 2: 同时与元相加
            () => {
                updateExplanation("引入未知数“元”，分别加到9和拆分后的16（即9+7）上。");
                
                const rectYuan1 = createRect(startX, baseY, yuanWidth, rectHeight, 'var(--rect-yuan-fill)', 'rectYuan1');
                const textYuan1 = createText(startX + yuanWidth / 2, baseY + rectHeight / 2, '元', 'textYuan1');
                makeVisible(rectYuan1); makeVisible(textYuan1);

                const rectYuan2 = createRect(startX, baseY + spacingY, yuanWidth, rectHeight, 'var(--rect-yuan-fill)', 'rectYuan2');
                const textYuan2 = createText(startX + yuanWidth/ 2, baseY + spacingY + rectHeight / 2, '元', 'textYuan2');
                makeVisible(rectYuan2); makeVisible(textYuan2);

                ['rectYuan1', 'textYuan1', 'rectYuan2', 'textYuan2'].forEach(id => highlightElement(id, id.startsWith('rect') ? 'rect' : 'text'));
            },
            // Step 3: 表示元加九对应二（份），元加十六对应三（份）。
            () => {
                updateExplanation("上面“元+9”代表两份，下面“元+16”代表三份。");
                const yuan1_endX = startX + yuanWidth + 9 * unitWidth;
                const textRatio2 = createText(yuan1_endX + 40, baseY + rectHeight / 2, '→ 2份', 'textRatio2');
                textRatio2.classList.add('part-indicator');
                makeVisible(textRatio2, 'appear-scale');

                const yuan2_endX = startX + yuanWidth + 9 * unitWidth + 7 * unitWidth; //元+16
                const textRatio3 = createText(yuan2_endX + 40, baseY + spacingY + rectHeight / 2, '→ 3份', 'textRatio3');
                textRatio3.classList.add('part-indicator');
                makeVisible(textRatio3, 'appear-scale');

                highlightElement('textRatio2', 'text');
                highlightElement('textRatio3', 'text');
            },
            // Step 4: 这里就是一份，一份是七。
            () => {
                updateExplanation("上下两组的差是7，对应份数差是1份。所以1份等于7。");
                highlightElement('rect16_7');
                highlightElement('text16_7','text');
                
                const textOnePartIsSeven = createText(startX + yuanWidth + 9 * unitWidth + (7 * unitWidth) / 2, baseY + spacingY + rectHeight + 25, '1份 = 7', 'textOnePartIsSeven');
                textOnePartIsSeven.classList.add('value-text');
                makeVisible(textOnePartIsSeven, 'appear-scale');
                highlightElement('textOnePartIsSeven', 'text');
            },
            // Step 5: 两份就是十四。
            () => {
                updateExplanation("因为1份是7，所以上面代表的2份就是 2 × 7 = 14。");
                const textTwoPartsIsFourteen = createText(startX + yuanWidth + (9 * unitWidth)/2, baseY - 25, '总共 = 14 (2份)', 'textTwoPartsIsFourteen');
                textTwoPartsIsFourteen.classList.add('value-text');
                makeVisible(textTwoPartsIsFourteen, 'appear-scale');
                highlightElement('textTwoPartsIsFourteen', 'text');

                const textRatio2 = document.getElementById('textRatio2');
                if (textRatio2) {
                     textRatio2.textContent = '→ 2份 = 14';
                     highlightElement('textRatio2', 'text');
                }
                 ['rectYuan1', 'rect9'].forEach(id => highlightElement(id));
            },
            // Step 6: 元 = 14 - 9 = 5
            () => {
                updateExplanation("“元+9”等于14，所以 “元” = 14 - 9 = 5。");
                
                const calcY = baseY - 55;
                const textYuanPlus9is14 = createText(startX + yuanWidth + (9 * unitWidth)/2, calcY, '元 + 9 = 14', 'textYuanPlus9is14');
                makeVisible(textYuanPlus9is14, 'appear-scale');

                const textYuanIs5Calc = createText(startX + yuanWidth + (9 * unitWidth)/2, calcY - 25, '元 = 14 - 9 = 5', 'textYuanIs5Calc');
                textYuanIs5Calc.classList.add('value-text');
                makeVisible(textYuanIs5Calc, 'appear-scale');
                highlightElement('textYuanIs5Calc','text');

                highlightElement('rectYuan1');
                highlightElement('textYuan1', 'text');
            },
            // Step 7: 五就是最终答案。
            () => {
                updateExplanation("所以，“元”的值是5。这就是最终答案！");
                ['textYuan1', 'textYuan2'].forEach(id => {
                    const el = document.getElementById(id);
                    if (el) {
                        el.textContent = '5';
                        el.style.fill = 'green';
                        makeVisible(el, 'appear-scale');
                        highlightElement(id, 'text');
                    }
                });
                 ['rectYuan1', 'rectYuan2'].forEach(id => highlightElement(id));


                const finalAnswerText = createText(180, baseY + spacingY + rectHeight + 80, '最终答案: 元 = 5', 'finalAnswerText'); // Centered approx
                finalAnswerText.classList.add('final-answer-text');
                makeVisible(finalAnswerText, 'appear-scale', 300);
            }
        ];

        function createSVGElement(elType, attributes, textContent) {
            const el = document.createElementNS(svgNS, elType);
            for (const key in attributes) {
                el.setAttribute(key, attributes[key]);
            }
            if (textContent) {
                el.textContent = textContent;
            }
            // Common initial styles for animation
            if (elType === 'rect' || elType === 'text') {
                 // Opacity is handled by .visible class and transitions
            }
            canvas.appendChild(el);
            return el;
        }

        function createRect(x, y, width, height, fill, id) {
            return createSVGElement('rect', {x, y, width, height, fill, id, rx:4, ry:4}); // Added rounded corners
        }

        function createText(x, y, content, id) {
            const attrs = {
                x, y, id,
                'text-anchor': 'middle',
                'dominant-baseline': 'middle',
                'font-size': (id === 'finalAnswerText' ? 20 : 16) // Default size, can be overridden by classes
            };
            return createSVGElement('text', attrs, content);
        }
        
        function updateExplanation(text) {
            explanationDiv.classList.remove('visible');
            setTimeout(() => {
                explanationDiv.textContent = text;
                explanationDiv.classList.add('visible');
            }, 300); // Delay to sync with visual changes
        }

        function clearCanvas() {
            while (canvas.firstChild) {
                canvas.removeChild(canvas.firstChild);
            }
        }

        function updateButtons() {
            prevBtn.disabled = currentStep <= 0;
            nextBtn.disabled = currentStep >= steps.length - 1;
        }
        
        function runStep(stepIndex) {
            if (stepIndex >= 0 && stepIndex < steps.length) {
                steps[stepIndex]();
            }
        }

        function runNextStep() {
            if (currentStep < steps.length - 1) {
                currentStep++;
                // For a cleaner animation on "next", we clear and rebuild state up to current step.
                // This ensures elements from previous steps are correctly positioned if logic changes them.
                clearCanvas();
                removeAllHighlights(); 
                explanationDiv.classList.remove('visible'); // Hide explanation briefly

                for (let i = 0; i <= currentStep; i++) {
                    const isCurrentIterStep = (i === currentStep);
                    // Wrap the step execution to control visibility and explanation for non-current steps
                    const originalStepFn = steps[i];
                    const wrappedStepFn = () => {
                        const tempExplanationVisibility = explanationDiv.classList.contains('visible');
                        if (!isCurrentIterStep) explanationDiv.classList.remove('visible');
                        
                        originalStepFn(); // Execute the original step logic

                        // Make sure all elements in non-current steps are instantly visible without animation
                        if (!isCurrentIterStep) {
                            canvas.querySelectorAll('rect, text').forEach(el => {
                                el.classList.remove('appear-translateY', 'appear-scale'); // Remove animation classes
                                el.classList.add('visible'); // Make them directly visible
                            });
                            if (!tempExplanationVisibility) explanationDiv.classList.remove('visible');
                        }
                    };
                    wrappedStepFn();
                }
            }
            updateButtons();
        }
        
        function runPrevStep() {
            if (currentStep > 0) {
                currentStep--;
                clearCanvas();
                removeAllHighlights();
                explanationDiv.classList.remove('visible');

                for (let i = 0; i <= currentStep; i++) {
                     const isCurrentIterStep = (i === currentStep);
                    const originalStepFn = steps[i];
                     const wrappedStepFn = () => {
                        const tempExplanationVisibility = explanationDiv.classList.contains('visible');
                        if (!isCurrentIterStep) explanationDiv.classList.remove('visible');
                        
                        originalStepFn(); 

                        if (!isCurrentIterStep) {
                            canvas.querySelectorAll('rect, text').forEach(el => {
                                el.classList.remove('appear-translateY', 'appear-scale');
                                el.classList.add('visible');
                            });
                             if (!tempExplanationVisibility) explanationDiv.classList.remove('visible');
                        }
                    };
                    wrappedStepFn();
                }
            }
            updateButtons();
        }

        nextBtn.addEventListener('click', runNextStep);
        prevBtn.addEventListener('click', runPrevStep);
        resetBtn.addEventListener('click', () => {
            currentStep = -1;
            explanationDiv.classList.remove('visible');
            setTimeout(() => runNextStep(), 50); // Small delay for visual reset
        });

        // Initialize viewBox for SVG and start
        function initialize() {
            // ViewBox is set in HTML now: viewBox="0 0 360 640"
            // This defines the coordinate system of the SVG.
            // `preserveAspectRatio="xMidYMid meet"` ensures it scales correctly.
            runNextStep(); // Start with the first step
        }
        
        initialize();

    </script>
</body>
</html>
